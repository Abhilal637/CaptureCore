<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Admin - Order Details</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">

  <div class="flex min-h-screen">
    
    <!-- Sidebar -->
    <div class="w-64">
      <%- include('../partial/admin/sidebar') %>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-6">
      <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow">
        <h1 class="text-2xl font-bold mb-4">Order Details - <%= order.orderId %></h1>

        <p><strong>Status:</strong> <%= order.status %></p>
        
        <!-- Order Summary -->
        <div class="mt-4 p-4 bg-gray-50 rounded-lg">
          <h3 class="text-lg font-semibold mb-3">Order Summary</h3>
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
            <div>
              <span class="text-gray-600">Subtotal:</span>
              <span class="font-medium ml-2">₹<%= order.subtotal.toFixed(2) %></span>
            </div>
            <div>
              <span class="text-gray-600">Tax:</span>
              <span class="font-medium ml-2">₹<%= order.tax.toFixed(2) %></span>
            </div>
            <div>
              <span class="text-gray-600">Shipping:</span>
              <span class="font-medium ml-2">₹<%= order.shipping.toFixed(2) %></span>
            </div>
            <div>
              <span class="text-gray-600">Total:</span>
              <span class="font-bold text-lg ml-2">₹<%= order.total.toFixed(2) %></span>
            </div>
          </div>
          
          <% 
            const cancelledItems = order.items.filter(item => item.status === 'Cancelled' || item.isCancelled);
            const totalCancelledAmount = cancelledItems.reduce((sum, item) => {
              const itemPrice = item.product?.price || item.price || 0;
              const itemQty = item.quantity || 1;
              return sum + (itemPrice * itemQty);
            }, 0);
          %>
          
          <% if (cancelledItems.length > 0) { %>
            <div class="mt-3 pt-3 border-t border-gray-200">
              <div class="flex justify-between items-center">
                <span class="text-red-600 font-medium">Cancelled Items Amount:</span>
                <span class="text-red-600 font-bold">₹<%= totalCancelledAmount.toFixed(2) %></span>
              </div>
              <div class="text-xs text-gray-500 mt-1">
                * Order total has been adjusted due to cancelled items
              </div>
            </div>
          <% } %>
        </div>
        
        <% if (order.status === 'Cancelled' && order.cancelReason) { %>
          <div class="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
            <div class="flex items-start gap-3">
              <svg class="w-5 h-5 text-red-600 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
              </svg>
              <div>
                <h3 class="text-sm font-semibold text-red-800 mb-1">Order Cancellation Reason</h3>
                <p class="text-sm text-red-700 whitespace-pre-line"><%= order.cancelReason %></p>
              </div>
            </div>
          </div>
        <% } %>

        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mt-4 gap-4">
          <% const nextStatusMap = {
            'Placed': ['Confirmed'],
            'Confirmed': ['Shipped'],
            'Shipped': ['Out for Delivery'],
            'Out for Delivery': ['Delivered'],
            'Delivered': [],
            'Cancelled': []
          }; %>
          <% const allowed = nextStatusMap[order.status] || []; %>

          <% if (allowed.length > 0) { %>
            <form action="/admin/orders/<%= order._id %>/update-status" method="POST" class="flex gap-3 status-update-form">
              <select name="status" class="border border-gray-300 rounded px-2 py-1">
                <option disabled selected value> -- Select Status -- </option>
                <% allowed.forEach(status => { %>
                  <option value="<%= status %>"><%= status %></option>
                <% }) %>
              </select>
              <button type="submit" class="bg-blue-600 text-white px-4 py-1 rounded hover:bg-blue-700">
                Update Status
              </button>
            </form>
          <% } else { %>
            <span class="text-gray-500">No further status updates available</span>
          <% } %>

          <!-- ✅ Updated: Per-item Return Approval Buttons -->
          <% if ((order.status === 'Return Requested' || order.status === 'Returned') && !order.returnVerified) { %>
            <% order.items.forEach(item => { %>
              <% if ((item.status === 'Return Requested' || item.status === 'Returned') && !item.returnApproved) { %>
                <form class="return-form" data-product-id="<%= item.product._id || item.product %>" data-order-id="<%= order._id %>">
                  <button type="submit" class="bg-green-600 text-white px-4 py-1 rounded hover:bg-green-700">
                    Approve Return & Refund for <%= item.productName %>
                  </button>
                </form>
              <% } %>
            <% }) %>
          <% } %>

          <a href="/admin/orders" class="text-blue-600 hover:underline">← Back to Order List</a>
        </div>

        <div class="mt-6">
          <h2 class="text-xl font-semibold">Items</h2>
          <table class="min-w-full mt-2 table-auto border">
            <thead>
              <tr class="bg-gray-200 text-left">
                <th class="px-4 py-2">Product</th>
                <th class="px-4 py-2">Qty</th>
                <th class="px-4 py-2">Price</th>
                <th class="px-4 py-2">Total</th>
                <th class="px-4 py-2">Status</th>
                <th class="px-4 py-2">Return Reason</th>
                
                <th class="px-4 py-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% order.items.forEach(item => { %>
                <tr class="border-t">
                  <td class="px-4 py-2"><%= item.productName %></td>
                  <td class="px-4 py-2"><%= item.quantity %></td>
                  <td class="px-4 py-2">₹<%= item.price.toFixed(2) %></td>
                  <td class="px-4 py-2">
                    ₹<%= item.totalAmount ? item.totalAmount.toFixed(2) : (item.price * item.quantity).toFixed(2) %>
                  </td>
                  <td class="px-4 py-2"><%= item.status %></td>
                  <td class="px-4 py-2 align-top">
                    <% if (item.returnReason && (item.status === 'Return Requested' || item.status === 'Returned')) { %>
                      <div class="text-sm text-gray-700 max-w-xs whitespace-pre-line"><%= item.returnReason %></div>
                    <% } else { %>
                      <span class="text-gray-400">-</span>
                    <% } %>
                  </td>
                  
                                     <td class="px-4 py-2">
                     <div class="flex flex-col gap-2">
                       <% if (item.status === 'Return Requested' && !item.returnApproved) { %>
                         <form class="return-form" data-product-id="<%= item.product._id || item.product %>" data-order-id="<%= order._id %>">
                           <button class="bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700 text-sm">
                             Approve Return & Refund
                           </button>
                         </form>
                       <% } %>
                       
                       <% if (item.status !== 'Cancelled' && item.status !== 'Delivered' && item.status !== 'Returned' && item.status !== 'Return Requested') { %>
                         <button class="cancel-item-btn bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700 text-sm" 
                                 data-order-id="<%= order._id %>" 
                                 data-product-id="<%= item.product._id || item.product %>"
                                 data-product-name="<%= item.productName %>">
                           Cancel Item
                         </button>
                       <% } %>
                       
                       <% if (item.status === 'Cancelled' || item.status === 'Delivered' || item.status === 'Returned' || item.status === 'Return Requested') { %>
                         <span class="text-gray-500 text-sm">-</span>
                       <% } %>
                     </div>
                   </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
  
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  // Handle status update form submissions with cancellation reason
  document.querySelectorAll('.status-update-form').forEach(form => {
    form.addEventListener('submit', function(e) {
      const selectEl = this.querySelector('select[name="status"]');
      const submitBtn = this.querySelector('button[type="submit"]');
      
      if (!selectEl || !selectEl.value) {
        e.preventDefault();
        Swal.fire({
          icon: 'error',
          title: 'Select a status',
          text: 'Please choose a valid next status before updating.',
          confirmButtonColor: '#d33'
        });
        return;
      }

      // If status is 'Cancelled', show SweetAlert for cancellation reason
      if (selectEl.value === 'Cancelled') {
        e.preventDefault();
        
        Swal.fire({
          title: 'Cancel Order',
          text: 'Please provide a reason for cancelling this order:',
          input: 'textarea',
          inputPlaceholder: 'Enter cancellation reason...',
          inputAttributes: {
            'aria-label': 'Cancellation reason',
            'required': 'required'
          },
          showCancelButton: true,
          confirmButtonText: 'Cancel Order',
          cancelButtonText: 'Keep Order',
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          inputValidator: (value) => {
            if (!value || value.trim().length === 0) {
              return 'Please provide a cancellation reason';
            }
            if (value.trim().length < 10) {
              return 'Cancellation reason must be at least 10 characters long';
            }
          }
        }).then((result) => {
          if (result.isConfirmed) {
            // Create a hidden input for the cancellation reason
            const reasonInput = document.createElement('input');
            reasonInput.type = 'hidden';
            reasonInput.name = 'cancelReason';
            reasonInput.value = result.value.trim();
            form.appendChild(reasonInput);
            
            // Submit the form
            submitBtn.textContent = 'Cancelling...';
            submitBtn.disabled = true;
            submitBtn.classList.add('opacity-50');
            form.submit();
          }
        });
        return;
      }

      // For other status updates, proceed normally
      submitBtn.textContent = 'Updating...';
      submitBtn.disabled = true;
      submitBtn.classList.add('opacity-50');
    });
  });

     document.querySelectorAll(".return-form").forEach(form => {
     form.addEventListener("submit", async (e) => {
       e.preventDefault();
       const orderId = form.dataset.orderId;
       const productId = form.dataset.productId;

       try {
         const res = await fetch(`/admin/orders/${orderId}/items/${productId}/verify-return`, {
           method: "POST",
           headers: { "Content-Type": "application/json" }
         });

         const data = await res.json();
         if (res.ok) {
           Swal.fire({
             title: 'Return Approved!',
             text: data.message,
             icon: 'success',
             confirmButtonText: 'OK'
           }).then(() => window.location.reload());
         } else {
           Swal.fire('Error', data.message || 'Something went wrong', 'error');
         }
       } catch (err) {
         console.error(err);
         Swal.fire('Error', 'Network or server error', 'error');
       }
     });
   });

   // Handle individual item cancellation
   document.querySelectorAll(".cancel-item-btn").forEach(button => {
     button.addEventListener("click", async (e) => {
       e.preventDefault();
       const orderId = button.dataset.orderId;
       const productId = button.dataset.productId;
       const productName = button.dataset.productName;

       const result = await Swal.fire({
         title: 'Cancel Item',
         text: `Please provide a reason for cancelling "${productName}":`,
         input: 'textarea',
         inputPlaceholder: 'Enter cancellation reason...',
         inputAttributes: {
           'aria-label': 'Cancellation reason',
           'required': 'required'
         },
         showCancelButton: true,
         confirmButtonText: 'Cancel Item',
         cancelButtonText: 'Keep Item',
         confirmButtonColor: '#d33',
         cancelButtonColor: '#3085d6',
         inputValidator: (value) => {
           if (!value || value.trim().length === 0) {
             return 'Please provide a cancellation reason';
           }
           if (value.trim().length < 10) {
             return 'Cancellation reason must be at least 10 characters long';
           }
         }
       });

       if (result.isConfirmed) {
         try {
           const res = await fetch(`/admin/orders/${orderId}/items/${productId}/cancel`, {
             method: "POST",
             headers: { "Content-Type": "application/json" },
             body: JSON.stringify({
               cancelReason: result.value.trim()
             })
           });

           const data = await res.json();
           if (res.ok) {
             Swal.fire({
               title: 'Item Cancelled!',
               text: data.message,
               icon: 'success',
               confirmButtonText: 'OK'
             }).then(() => window.location.reload());
           } else {
             Swal.fire('Error', data.message || 'Failed to cancel item', 'error');
           }
         } catch (err) {
           console.error(err);
           Swal.fire('Error', 'Network or server error', 'error');
         }
       }
     });
   });
</script>

</body>
</html>
