<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title><%= product.name %> - CaptureCore</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.3/css/lightbox.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.3/js/lightbox.min.js"></script>
  <style>
    .image-gallery img {
      transition: transform 0.3s ease;
    }
    .image-gallery img:hover {
      transform: scale(1.05);
    }
    .stock-indicator {
      position: absolute;
      top: 10px;
      right: 10px;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      font-weight: bold;
      z-index: 10;
    }
    .in-stock { background: #10b981; color: white; }
    .low-stock { background: #f59e0b; color: white; }
    .out-of-stock { background: #ef4444; color: white; }
    .rating-stars {
      color: #fbbf24;
    }
    .breadcrumb-item:not(:last-child)::after {
      content: '>';
      margin: 0 8px;
      color: #6b7280;
    }
  </style>
</head>
<body class="bg-gray-50 text-gray-800">
  <%- include('../partial/user/navbar') %>

  <main class="max-w-7xl mx-auto px-4 py-8">
    <!-- Product Status Warning -->
    <% if (product.isBlocked || !product.isListed || product.isDeleted || !product.isActive || (product.category && product.category.isBlocked)) { %>
      <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800">Product Unavailable</h3>
            <div class="mt-2 text-sm text-red-700">
              <p>This product is currently not available for purchase due to:</p>
              <ul class="list-disc list-inside mt-1">
                <% if (product.isBlocked) { %><li>Product has been blocked</li><% } %>
                <% if (!product.isListed) { %><li>Product is not listed</li><% } %>
                <% if (product.isDeleted) { %><li>Product has been deleted</li><% } %>
                <% if (!product.isActive) { %><li>Product is inactive</li><% } %>
                <% if (product.category && product.category.isBlocked) { %><li>Product category is blocked</li><% } %>
              </ul>
            </div>
          </div>
        </div>
      </div>
    <% } %>

    <!-- Breadcrumbs -->
    <nav class="mb-6">
      <div class="flex items-center text-sm text-gray-600">
        <a href="/" class="hover:text-blue-600">Home</a>
        <span class="breadcrumb-item"></span>
        <a href="/shop" class="hover:text-blue-600">Shop</a>
        <span class="breadcrumb-item"></span>
        <% if (product.category) { %>
          <a href="/shop?category=<%= product.category._id %>" class="hover:text-blue-600"><%= product.category.name %></a>
          <span class="breadcrumb-item"></span>
        <% } %>
        <span class="text-gray-900 font-medium"><%= product.name %></span>
      </div>
    </nav>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <!-- Product Images -->
      <div class="space-y-4">
        <div class="relative">
          <!-- Main Image -->
          <div class="aspect-square bg-white rounded-lg shadow-md overflow-hidden group">
            <a href="<%= product.images && product.images[0] ? product.images[0] : '/images/placeholder.jpg' %>" 
              data-lightbox="product-gallery" 
              data-title="<%= product.name %>">
              <img src="<%= product.images && product.images[0] ? product.images[0] : '/images/placeholder.jpg' %>" 
                alt="<%= product.name %>" 
                class="w-full h-full object-cover transition-transform duration-300 ease-in-out group-hover:scale-150" 
                id="mainImage" />
            </a>
            <div class="stock-indicator <%= product.stock > 10 ? 'in-stock' : product.stock > 0 ? 'low-stock' : 'out-of-stock' %>">
              <%= product.stock > 10 ? 'In Stock' : product.stock > 0 ? 'Low Stock' : 'Out of Stock' %>
            </div>
          </div>
        </div>

        <!-- Thumbnail Gallery -->
        <% if (product.images && product.images.length > 1) { %>
          <div class="grid grid-cols-4 gap-2 image-gallery">
            <% product.images.forEach((image, index) => { %>
              <div class="aspect-square bg-white rounded-lg shadow-sm overflow-hidden cursor-pointer border-2 <%= index === 0 ? 'border-blue-500' : 'border-transparent' %>"
                  onclick="changeMainImage('<%= image %>', this)">
                <img src="<%= image %>" 
                    alt="<%= product.name %> - Image <%= index + 1 %>" 
                    class="w-full h-full object-cover" />
              </div>
            <% }); %>
          </div>
        <% } %>
      </div>

      <!-- Product Info -->
      <div class="space-y-6">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 mb-2"><%= product.name %></h1>
          <div class="flex items-center mb-4">
            <div class="rating-stars text-xl">â˜…â˜…â˜…â˜…â˜…</div>
            <span class="ml-2 text-sm text-gray-600">(0 reviews)</span>
            <span class="ml-4 text-sm text-gray-500">|</span>
            <span class="ml-4 text-sm text-gray-500">SKU: <%= product._id %></span>
          </div>
        </div>

        <div class="space-y-2">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-3">
              <span class="text-3xl font-bold text-blue-600">â‚¹<%= product.price %></span>
              <% if (product.discounted) { %>
                <span class="text-xl text-gray-400 line-through">â‚¹<%= product.originalPrice %></span>
                <span class="bg-red-100 text-red-800 px-2 py-1 rounded text-sm font-medium">
                  <%= Math.round(((product.originalPrice - product.price) / product.originalPrice) * 100) %>% OFF
                </span>
              <% } %>
            </div>
            <!-- Wishlist Toggle Icon -->
            <button class="add-to-wishlist-heart" data-product-id="<%= product._id %>">
              <svg class="w-6 h-6 <%= isInWishlist ? 'text-red-500' : 'text-gray-400' %> hover:text-red-500 transition-all duration-200" 
                   fill="<%= isInWishlist ? 'red' : 'none' %>" 
                   viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" 
                      d="M21 8.25c0-2.5-2-4.5-4.5-4.5S12 5.75 12 8.25s-2-4.5-4.5-4.5S3 5.75 3 8.25c0 3.5 3 6.5 9 11.25 6-4.75 9-7.75 9-11.25z" />
              </svg>
            </button>
          </div>
          <div class="bg-green-50 border border-green-200 rounded-lg p-3">
            <div class="flex items-center">
              <span class="text-green-600 mr-2">ðŸŽ‰</span>
              <span class="text-sm text-green-800">Use code <strong>WELCOME10</strong> for 10% off</span>
            </div>
          </div>
        </div>

        <div class="space-y-3">
          <% if (product.stock > 10) { %>
            <div class="flex items-center text-green-600">
              <span class="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
              <span>In Stock (<%= product.stock %> available)</span>
            </div>
          <% } else if (product.stock > 0) { %>
            <div class="flex items-center text-orange-600">
              <span class="w-2 h-2 bg-orange-500 rounded-full mr-2"></span>
              <span>Low Stock - Only <%= product.stock %> left!</span>
            </div>
          <% } else { %>
            <div class="flex items-center text-red-600">
              <span class="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
              <span>Out of Stock</span>
            </div>
          <% } %>
        </div>

        <div>
          <h3 class="text-lg font-semibold mb-2">Description</h3>
          <p class="text-gray-700 leading-relaxed"><%= product.description %></p>
        </div>

        <div class="space-y-4">
          <div class="flex items-center gap-4">
            <label class="text-sm font-medium">Quantity:</label>
            <div class="flex items-center border rounded-lg">
              <button onclick="changeQuantity(-1)" class="px-3 py-2 hover:bg-gray-100">-</button>
              <input type="number" id="quantity" value="1" min="1" max="<%= Math.min(5, product.stock) %>" 
                    class="w-16 text-center border-none focus:outline-none" 
                    data-max-stock="<%= product.stock || 0 %>" />
              <button onclick="changeQuantity(1)" class="px-3 py-2 hover:bg-gray-100">+</button>
            </div>
            <span class="text-xs text-gray-500">(Max 5 for Buy Now)</span>
          </div>

          <div class="flex gap-3">
            <% if (product.stock > 0 && !product.isBlocked && product.isListed && product.isActive && !product.isDeleted && (!product.category || !product.category.isBlocked)) { %>
              <button type="button" class="add-to-cart-btn bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700" 
                      data-product-id="<%= product._id %>">
                Add to Cart
              </button>
              <button type="button" class="buy-now-btn flex-1 bg-green-600 text-white py-3 px-6 rounded-lg hover:bg-green-700 transition-colors text-center" 
                      data-product-id="<%= product._id %>">
                Buy Now
              </button>
            <% } else if (product.stock <= 0) { %>
              <button disabled class="flex-1 bg-red-600 text-white py-3 px-6 rounded-lg cursor-not-allowed">
                Out of Stock
              </button>
              <button type="button" class="flex-1 bg-gray-500 text-white py-3 px-6 rounded-lg hover:bg-gray-600 transition-colors" onclick="openNotifyModal()">
                Notify Me
              </button>
            <% } else { %>
              <button disabled class="flex-1 bg-gray-400 text-white py-3 px-6 rounded-lg cursor-not-allowed">
                Product Unavailable
              </button>
              <button disabled class="flex-1 bg-gray-400 text-white py-3 px-6 rounded-lg cursor-not-allowed">
                Cannot Purchase
              </button>
            <% } %>
          </div>
        </div>

        <div class="bg-gray-50 rounded-lg p-4">
          <h3 class="text-lg font-semibold mb-3">Highlights & Specifications</h3>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
            <div class="flex justify-between"><span class="text-gray-600">Category:</span><span class="font-medium"><%= product.category ? product.category.name : 'Uncategorized' %></span></div>
            <div class="flex justify-between"><span class="text-gray-600">Brand:</span><span class="font-medium">CaptureCore</span></div>
            <div class="flex justify-between"><span class="text-gray-600">Warranty:</span><span class="font-medium">1 Year</span></div>
            <div class="flex justify-between"><span class="text-gray-600">Shipping:</span><span class="font-medium">Free Delivery</span></div>
            <div class="flex justify-between"><span class="text-gray-600">Return Policy:</span><span class="font-medium">30 Days</span></div>
            <div class="flex justify-between"><span class="text-gray-600">Product ID:</span><span class="font-medium"><%= product._id %></span></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Reviews Section -->
    <div class="mt-12">
      <div class="border-t pt-8">
        <h2 class="text-2xl font-bold mb-6">Customer Reviews</h2>
        
        <!-- Review Summary -->
        <div class="bg-white rounded-lg p-6 mb-6 shadow-sm">
          <div class="flex items-center gap-8">
            <div class="text-center">
              <div class="text-4xl font-bold text-blue-600">0.0</div>
              <div class="rating-stars text-xl">â˜…â˜…â˜…â˜…â˜…</div>
              <div class="text-sm text-gray-600 mt-1">0 reviews</div>
            </div>
            <div class="flex-1">
              <div class="space-y-2">
                <div class="flex items-center gap-2">
                  <span class="text-sm">5 stars</span>
                  <div class="flex-1 bg-gray-200 rounded-full h-2">
                    <div class="bg-yellow-400 h-2 rounded-full" style="width: 0%"></div>
                  </div>
                  <span class="text-sm text-gray-600">0%</span>
                </div>
                <div class="flex items-center gap-2">
                  <span class="text-sm">4 stars</span>
                  <div class="flex-1 bg-gray-200 rounded-full h-2">
                    <div class="bg-yellow-400 h-2 rounded-full" style="width: 0%"></div>
                  </div>
                  <span class="text-sm text-gray-600">0%</span>
                </div>
                <div class="flex items-center gap-2">
                  <span class="text-sm">3 stars</span>
                  <div class="flex-1 bg-gray-200 rounded-full h-2">
                    <div class="bg-yellow-400 h-2 rounded-full" style="width: 0%"></div>
                  </div>
                  <span class="text-sm text-gray-600">0%</span>
                </div>
                <div class="flex items-center gap-2">
                  <span class="text-sm">2 stars</span>
                  <div class="flex-1 bg-gray-200 rounded-full h-2">
                    <div class="bg-yellow-400 h-2 rounded-full" style="width: 0%"></div>
                  </div>
                  <span class="text-sm text-gray-600">0%</span>
                </div>
                <div class="flex items-center gap-2">
                  <span class="text-sm">1 star</span>
                  <div class="flex-1 bg-gray-200 rounded-full h-2">
                    <div class="bg-yellow-400 h-2 rounded-full" style="width: 0%"></div>
                  </div>
                  <span class="text-sm text-gray-600">0%</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Write Review Button -->
        <div class="text-center py-8">
          <button class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors">
            Write a Review
          </button>
        </div>

        <!-- No Reviews Message -->
        <div class="text-center py-8 text-gray-500">
          <p>No reviews yet. Be the first to review this product!</p>
        </div>
        
        <!-- Notify When Available Modal -->
        <div id="notifyModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
          <div class="bg-white rounded-lg p-6 max-w-md w-full">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-bold text-gray-900">Get Stock Notification</h3>
              <button onclick="closeNotifyModal()" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <p class="text-gray-600 mb-4">We'll notify you when <%= product.name %> is back in stock.</p>
            
            <form id="notifyForm" class="space-y-4" onsubmit="submitNotification(event)">
              <div>
                <label for="notifyEmail" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                <input type="email" id="notifyEmail" required
                      class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                      placeholder="your@email.com">
              </div>
              <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors">
                Notify Me
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Related Products -->
    <% if (related && related.length > 0) { %>
      <div class="mt-12 border-t pt-8">
        <h2 class="text-2xl font-bold mb-6">Related Products</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <% related.forEach(relatedProduct => { %>
            <div class="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow cursor-pointer group" 
                onclick="window.location.href='/product/<%= relatedProduct._id %>'">
              <div class="relative aspect-square overflow-hidden rounded-t-lg">
                <img src="<%= relatedProduct.images && relatedProduct.images[0] ? relatedProduct.images[0] : '/images/placeholder.jpg' %>" 
                    alt="<%= relatedProduct.name %>" 
                    class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"/>
                
                <!-- Stock indicator for related products -->
                <div class="stock-indicator <%= relatedProduct.stock > 10 ? 'in-stock' : relatedProduct.stock > 0 ? 'low-stock' : 'out-of-stock' %>">
                  <%= relatedProduct.stock > 10 ? 'In Stock' : relatedProduct.stock > 0 ? 'Low Stock' : 'Out of Stock' %>
                </div>
              </div>
              <div class="p-4">
                <h3 class="font-medium text-gray-900 mb-2 line-clamp-2"><%= relatedProduct.name %></h3>
                <div class="flex items-center justify-between">
                  <span class="text-lg font-bold text-blue-600">$<%= relatedProduct.price %></span>
                  <div class="rating-stars text-sm">â˜…â˜…â˜…â˜…â˜…</div>
                </div>
              </div>
            </div>
          <% }); %>
        </div>
      </div>
    <% } %>
  </main>

  <!-- SweetAlert CDN -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    const productStock = parseInt(document.getElementById('quantity').getAttribute('data-max-stock') || '0');

    function changeMainImage(imageSrc, thumbnailElement) {
      document.getElementById('mainImage').src = imageSrc;
      const lightboxLink = document.querySelector('[data-lightbox="product-gallery"]');
      lightboxLink.href = imageSrc;
      document.querySelectorAll('.image-gallery .border-2').forEach(thumb => {
        thumb.classList.remove('border-blue-500');
        thumb.classList.add('border-transparent');
      });
      thumbnailElement.classList.remove('border-transparent');
      thumbnailElement.classList.add('border-blue-500');
    }

    function changeQuantity(delta) {
      const quantityInput = document.getElementById('quantity');
      const currentValue = parseInt(quantityInput.value);
      let newValue = currentValue + delta;
      if (newValue < 1) newValue = 1;
      
      // Enforce buy now limit of 5 items
      const maxAllowed = Math.min(5, productStock);
      if (newValue > maxAllowed) newValue = maxAllowed;
      
      quantityInput.value = newValue;
      
      // Update hidden form input if it exists
      const hiddenQuantityInput = document.querySelector('input[name="quantity"]');
      if (hiddenQuantityInput) {
        hiddenQuantityInput.value = newValue;
      }
    }

    // Initialize lightbox
    if (typeof lightbox !== 'undefined') {
      lightbox.option({
        'resizeDuration': 200,
        'wrapAround': true,
        'albumLabel': 'Image %1 of %2'
      });
    }

    // Quantity input validation
    document.getElementById('quantity').addEventListener('change', function () {
      const value = parseInt(this.value);
      if (value < 1) this.value = 1;
      
      // Enforce buy now limit of 5 items
      const maxAllowed = Math.min(5, productStock);
      if (value > maxAllowed) this.value = maxAllowed;
      
      // Update hidden form input if it exists
      const hiddenQuantityInput = document.querySelector('input[name="quantity"]');
      if (hiddenQuantityInput) {
        hiddenQuantityInput.value = this.value;
      }
    });

    function openNotifyModal() {
      const modal = document.getElementById('notifyModal');
      modal.classList.remove('hidden');
      modal.classList.add('flex');
    }

    function closeNotifyModal() {
      const modal = document.getElementById('notifyModal');
      modal.classList.add('hidden');
      modal.classList.remove('flex');
    }

    function submitNotification(event) {
      event.preventDefault();
      const email = document.getElementById('notifyEmail').value;
      
      Swal.fire({
        icon: 'success',
        title: 'Notification Set!',
        text: `We will notify you at ${email} when this product is back in stock.`,
        toast: true,
        position: 'top-end',
        timer: 3000,
        showConfirmButton: false
      });
      
      closeNotifyModal();
    }

         // Buy Now functionality
         document.addEventListener('DOMContentLoaded', function() {
           // Buy Now button handler
           const buyNowBtn = document.querySelector('.buy-now-btn');
           if (buyNowBtn) {
             buyNowBtn.addEventListener('click', async function(e) {
               e.preventDefault();
               
               const productId = this.getAttribute('data-product-id');
               const quantity = parseInt(document.getElementById('quantity').value) || 1;
               
               const productStock = parseInt('<%= product.stock || 0 %>');
               
               if (productStock <= 0) {
                 Swal.fire({
                   icon: 'error',
                   title: 'Out of Stock',
                   text: 'This product is currently out of stock.'
                 });
                 return;
               }
               
               // Check buy now limit (max 5 products)
               if (quantity > 5) {
                 Swal.fire({
                   icon: 'error',
                   title: 'Quantity Limit Exceeded',
                   text: 'You can only buy up to 5 items at once using Buy Now. For larger quantities, please add to cart.'
                 });
                 return;
               }
               
               if (quantity > productStock) {
                 Swal.fire({
                   icon: 'error',
                   title: 'Insufficient Stock',
                   text: `Only ${productStock} items available in stock.`
                 });
                 return;
               }
               
               // Redirect to checkout with product details
               window.location.href = `/checkout?productId=${productId}&quantity=${quantity}`;
             });
           }
           
           // Add to Cart functionality
       console.log('DOM loaded, looking for add to cart button...');
       const addToCartBtn = document.querySelector('.add-to-cart-btn');
       console.log('Found button:', addToCartBtn);
       
       if (addToCartBtn) {
         console.log('Setting up click handler for button');
         addToCartBtn.addEventListener('click', async function(e) {
           console.log('Button clicked!');
           e.preventDefault();

           const productId = this.getAttribute('data-product-id');
           const quantity = 1; // Default quantity since no quantity input exists

           console.log('Product ID:', productId, 'Quantity:', quantity);

           const productStock = parseInt('<%= product.stock || 0 %>');
          
           if (productStock <= 0) {
             Swal.fire({
               icon: 'error',
               title: 'Out of Stock',
               text: 'This product is currently out of stock.'
             });
             return;
           }

           // Disable button and show loading state
           this.disabled = true;
           const originalText = this.textContent;
           this.textContent = 'Adding...';
           
           try {
             console.log('Sending request to:', `/add-to-cart/${productId}`);
             
             const response = await fetch(`/add-to-cart/${productId}`, {
               method: 'POST',
               headers: { 
                 'Content-Type': 'application/json'
               },
               body: JSON.stringify({ quantity })
             });

             console.log('Response status:', response.status);

             if (response.ok) {
               const result = await response.json();
               console.log('Success:', result);
               
               // Update cart count
               updateCartCount();
               
               // Show success message
               Swal.fire({
                 icon: 'success',
                 title: 'Added to Cart!',
                 text: 'The product was successfully added to your cart.',
                 toast: true,
                 position: 'top-end',
                 timer: 2000,
                 showConfirmButton: false
               });
               
             } else if (response.status === 401) {
               // User not logged in
               Swal.fire({
                 icon: 'warning',
                 title: 'Login Required',
                 text: 'Please log in to add items to your cart.',
                 showCancelButton: true,
                 confirmButtonText: 'Login',
                 cancelButtonText: 'Cancel'
               }).then((result) => {
                 if (result.isConfirmed) {
                   window.location.href = '/login';
                 }
               });
               
             } else {
               const errorData = await response.json();
               console.log('Error:', errorData);
               Swal.fire({
                 icon: 'error',
                 title: 'Error',
                 text: errorData.message || 'Failed to add product to cart.'
               });
             }
             
           } catch (err) {
             console.error('Fetch error:', err);
             Swal.fire({
               icon: 'error',
               title: 'Network Error',
               text: 'Something went wrong. Please try again.'
             });
           } finally {
             // Re-enable button
             this.disabled = false;
             this.textContent = originalText;
           }
         });
       } else {
         console.log('Add to cart button not found!');
       }
     });

    // Close modal when clicking outside
    document.getElementById('notifyModal').addEventListener('click', function(e) {
      if (e.target === this) {
        closeNotifyModal();
      }
    });

    
    // Wishlist functionality
    document.querySelectorAll('.add-to-wishlist-heart').forEach(btn => {
      btn.addEventListener('click', async () => {
        const productId = btn.dataset.productId;
        const svg = btn.querySelector('svg');
        const isInWishlist = svg.getAttribute('fill') === 'red';

        try {
          const url = isInWishlist 
            ? `/wishlist/remove/${productId}` 
            : `/wishlist/add/${productId}`;
          
          const method = isInWishlist ? 'DELETE' : 'POST';
          
          const res = await fetch(url, {
            method: method,
            headers: {
              'Content-Type': 'application/json'
            },
            credentials: 'same-origin'
          });

          if (res.ok) {
            if (isInWishlist) {
              // Remove from wishlist - make heart gray
              svg.setAttribute('fill', 'none');
              svg.classList.remove('text-red-500');
              svg.classList.add('text-gray-400');
              
              Swal.fire({
                icon: 'success',
                title: 'Removed from Wishlist!',
                text: 'Product has been removed from your wishlist.',
                toast: true,
                position: 'top-end',
                timer: 2000,
                showConfirmButton: false
              });
            } else {
              // Add to wishlist - make heart red
              svg.setAttribute('fill', 'red');
              svg.classList.remove('text-gray-400');
              svg.classList.add('text-red-500');
              
              Swal.fire({
                icon: 'success',
                title: 'Added to Wishlist!',
                text: 'Product has been added to your wishlist.',
                toast: true,
                position: 'top-end',
                timer: 2000,
                showConfirmButton: false
              });
            }

            // Update wishlist count if element exists
            const countElem = document.getElementById('wishlistCount');
            if (countElem) {
              countElem.classList.remove('hidden');
              let currentCount = parseInt(countElem.textContent) || 0;
              countElem.textContent = isInWishlist ? Math.max(0, currentCount - 1) : currentCount + 1;
            }
          } else {
            const data = await res.json();
            if (res.status === 401) {
              // User not logged in
              Swal.fire({
                icon: 'warning',
                title: 'Login Required',
                text: 'Please log in to manage your wishlist.',
                showCancelButton: true,
                confirmButtonText: 'Login',
                cancelButtonText: 'Cancel'
              }).then((result) => {
                if (result.isConfirmed) {
                  window.location.href = '/login';
                }
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Failed to update wishlist.'
              });
            }
          }
        } catch (err) {
          console.error(err);
          Swal.fire({
            icon: 'error',
            title: 'Network Error',
            text: 'Something went wrong. Please try again.'
          });
        }
      });
    });

  
    async function updateCartCount() {
      try {
        const response = await fetch('/cart/count');
        const data = await response.json();
        const cartCountElement = document.getElementById('cartCount');
        if (cartCountElement) {
          cartCountElement.textContent = data.count;
          cartCountElement.classList.toggle('hidden', data.count === 0);
        }
      } catch (error) {
        console.error('Error updating cart count:', error);
      }
    }

  </script>
</body>
</html>