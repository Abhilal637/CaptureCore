<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Checkout | CaptureCore</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/js/inline-validator.js"></script>
</head>
<body class="bg-gray-100 text-gray-800">
  <%- include('../partial/user/navbar') %>
  <div class="max-w-6xl mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6 flex items-center gap-3">
      Checkout
      <span id="savingAddressBadge" class="hidden text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">Saving address...</span>
      <% if (isBuyNow) { %>
        <span class="text-sm text-green-600 font-normal">(Buy Now)</span>
      <% } %>
    </h1>

    <!-- START FORM -->
    <form action="/place-order" method="POST">
      <% if (isBuyNow && buyNowProduct) { %>
        <input type="hidden" name="productId" value="<%= buyNowProduct._id %>">
        <input type="hidden" name="quantity" value="<%= buyNowProduct.quantity %>">
      <% } %>

      <!-- Address Section -->
      <div class="mb-8">
        <h2 class="text-xl font-semibold mb-4">Shipping Address</h2>

        <% if (addresses && addresses.length > 0) { %>
          <div class="grid gap-6 md:grid-cols-2" id="addresses-container">
            <% addresses.forEach(address => { %>
              <label class="border rounded-lg p-5 shadow-sm bg-white cursor-pointer flex gap-4 hover:border-blue-300 transition-colors address-card" data-address-id="<%= address._id %>">
                <input 
                  type="radio" 
                  name="addressId" 
                  value="<%= address._id %>" 
                  class="accent-blue-600 mt-1"
                  required
                  <%= (defaultAddress && defaultAddress === address._id.toString()) ? 'checked' : '' %>)
                >
                <div class="flex-1">
                  <h3 class="text-lg font-semibold address-name"><%= address.fullName %></h3>
                  <p class="address-details"><%= address.addressLine %>, <%= address.city %>, <%= address.state %>, <%= address.pincode %></p>
                  <p class="address-phone">Phone: <%= address.phone %></p>
                  <% if (defaultAddress === address._id.toString()) { %>
                    <span class="text-sm text-green-600 font-medium">Default Address</span>
                  <% } %>
                </div>
                <button type="button" class="text-blue-600 text-sm hover:underline edit-address-btn self-start" data-address-id="<%= address._id %>">Edit</button>
              </label>
            <% }) %>
          </div>
        <% } else { %>
          <p class="text-gray-500">No address found.</p>
        <% } %>

        <div class="mt-4 flex gap-3">
          <a href="/addresses/add" class="inline-block bg-gray-200 text-gray-800 px-4 py-2 rounded hover:bg-gray-300">Manage Addresses</a>
          <button type="button" id="openAddAddressModal" class="inline-block bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Add New Address</button>
        </div>
      </div>

      <!-- Order Items -->
      <div class="mb-8">
        <h2 class="text-xl font-semibold mb-4">Order Summary</h2>
        <div class="space-y-4">
          <% items.forEach(item => { %>
            <div class="flex gap-4 items-center bg-white p-4 rounded shadow">
              <img 
                src="<%= item.image %>" 
                onerror="this.onerror=null; this.src='/images/placeholder.png';" 
                class="w-20 h-20 object-cover rounded" 
                alt="Product Image">
              <div class="flex-1">
                <h3 class="font-medium"><%= item.name %></h3>
                <p>Quantity: <%= item.quantity %></p>
              </div>
              <div class="text-right">
                <p class="text-lg font-semibold">
                  â‚¹<%= item.itemTotal.toLocaleString('en-IN', { minimumFractionDigits: 2 }) %>
                </p>
              </div>
            </div>
          <% }) %>
        </div>
      </div>

      <!-- Price Summary -->
      <div class="bg-white p-6 rounded shadow mb-8">
        <h2 class="text-xl font-semibold mb-4">Price Summary</h2>
        <div class="space-y-2 text-sm">
          <div class="flex justify-between">
            <span>Subtotal</span>
            <span>â‚¹<%= subtotal.toFixed(2) %></span>
          </div>
          <div class="flex justify-between">
            <span>Tax (5%)</span>
            <span>â‚¹<%= tax.toFixed(2) %></span>
          </div>
          <div class="flex justify-between">
            <span>Discount</span>
            <span>- â‚¹<%= discount.toFixed(2) %></span>
          </div>
          <div class="flex justify-between">
            <span>Shipping</span>
            <span>â‚¹<%= shipping.toFixed(2) %></span>
          </div>
          <div class="border-t pt-2 flex justify-between font-semibold text-lg">
            <span>Total</span>
            <span>â‚¹<%= finalTotal.toFixed(2) %></span>
          </div>
        </div>
      </div>

      <!-- Payment Method -->
      <div class="bg-white p-6 rounded shadow mb-8">
        <h2 class="text-xl font-semibold mb-4">Select Payment Method</h2>
        <div class="flex gap-4">
          <label class="flex items-center gap-2 cursor-pointer">
            <input type="radio" name="paymentMethod" value="COD" checked class="peer hidden">
            <div class="peer-checked:ring-2 peer-checked:ring-green-500 bg-gray-100 p-3 rounded-full transition">
              ðŸ’µ Cash on Delivery
            </div>
          </label>
        </div>
      </div>

      <!-- Submit Button -->
      <button type="submit" class="w-full bg-green-600 text-white py-3 rounded text-lg hover:bg-green-700">
        Place Order
      </button>

    </form>
    <!-- END FORM -->
  </div>

<!-- Address Edit Modal -->
<div id="editAddressModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" style="display: none;">
  <div class="bg-white rounded-lg p-8 w-full max-w-md relative shadow-xl">
    <button id="closeEditModal" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 text-2xl">&times;</button>
    <h2 class="text-2xl font-semibold mb-6">Edit Address</h2>
    
    <form id="editAddressForm" action="/addresses/edit" method="POST">
      <input type="hidden" name="addressId" id="editAddressId">
      
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
        <input type="text" name="fullName" id="editName" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" data-required>
      </div>
      
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">Address</label>
        <input type="text" name="addressLine" id="editStreet" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" data-required>
      </div>
      
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">City</label>
        <input type="text" name="city" id="editCity" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" data-required>
      </div>
      
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">State</label>
        <input type="text" name="state" id="editState" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" data-required>
      </div>
      
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">Pincode</label>
        <input type="text" name="pincode" id="editZipCode" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" data-required maxlength="6" pattern="[0-9]*" inputmode="numeric">
      </div>
      
      <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-2">Phone</label>
        <input type="text" name="phone" id="editPhone" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" data-required maxlength="10" pattern="[0-9]*" inputmode="numeric">
      </div>
      
      <div class="mb-6">
        <label class="flex items-center gap-2">
          <input type="checkbox" name="isDefault" id="editIsDefault" class="rounded">
          <span class="text-sm text-gray-700">Set as default address</span>
        </label>
      </div>
      
      <div class="flex gap-3">
        <button type="button" id="cancelEdit" class="flex-1 bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 transition-colors">Cancel</button>
        <button type="submit" id="saveAddressBtn" class="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">Save Address</button>
      </div>
    </form>
  </div>
</div>

<!-- Loading overlay -->
<div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-60 hidden">
  <div class="bg-white rounded-lg p-6 flex items-center gap-3">
    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
    <span>Updating address...</span>
  </div>
</div>

<!-- Pass addresses data to JavaScript -->
<script type="application/json" id="addresses-data"><%- JSON.stringify(addresses || []) %></script>

  <script>
  let addresses = [];
  
  // Load addresses data safely
  try {
    const addressesElement = document.getElementById('addresses-data');
    if (addressesElement && addressesElement.textContent.trim()) {
      addresses = JSON.parse(addressesElement.textContent);
      console.log('Successfully loaded addresses:', addresses);
    } else {
      console.log('No addresses data found');
    }
  } catch (e) {
    console.error('Error loading addresses data:', e);
    // Fallback: try to extract from the DOM
    try {
      const addressCards = document.querySelectorAll('.address-card');
      addresses = Array.from(addressCards).map(card => {
        return {
          _id: card.dataset.addressId,
          fullName: card.querySelector('.address-name')?.textContent || '',
          addressLine: '', // extract below if needed
          city: '',
          state: '',
          pincode: '',
          phone: card.querySelector('.address-phone')?.textContent.replace('Phone: ', '') || ''
        };
      });
      console.log('Fallback addresses extracted:', addresses);
    } catch (fallbackError) {
      console.error('Fallback extraction failed:', fallbackError);
      addresses = [];
    }
  }

  // Modal elements
  const modal = document.getElementById('editAddressModal');
  const form = document.getElementById('editAddressForm');
  const loadingOverlay = document.getElementById('loadingOverlay');
  const savingBadge = document.getElementById('savingAddressBadge');

  // Debug: Check if addresses data loaded
  console.log('Loaded addresses:', addresses);
  console.log('Found edit buttons:', document.querySelectorAll('.edit-address-btn').length);

  // Edit button click handlers
  document.querySelectorAll('.edit-address-btn').forEach((btn, index) => {
    console.log(`Setting up button ${index}:`, btn);
    
    btn.addEventListener('click', function(e) {
      console.log('Edit button clicked!');
      e.preventDefault();
      e.stopPropagation(); // Prevent radio button selection
      
      const addressId = this.dataset.addressId;
      console.log('Address ID:', addressId);
      
      // Try to find address in our data
      let address = addresses.find(a => a._id === addressId);
      
      // If not found in data, extract from DOM as fallback
      if (!address) {
        console.log('Address not found in data, extracting from DOM');
        const card = document.querySelector(`.address-card[data-address-id="${addressId}"]`);
        if (card) {
          const name = card.querySelector('.address-name')?.textContent || '';
          const details = card.querySelector('.address-details')?.textContent || '';
          const phone = card.querySelector('.address-phone')?.textContent.replace('Phone: ', '') || '';
          
          // Parse address details (format: "addressLine, city, state, pincode")
          const detailsParts = details.split(', ');
          
          address = {
            _id: addressId,
            fullName: name,
            addressLine: detailsParts[0] || '',
            city: detailsParts[1] || '',
            state: detailsParts[2] || '',
            pincode: detailsParts[3] || '',
            phone: phone,
            isDefault: card.querySelector('.text-green-600') !== null
          };
          console.log('Extracted address from DOM:', address);
        }
      }
      
      console.log('Using address:', address);
      
      if (address) {
        // Populate modal form
        document.getElementById('editAddressId').value = address._id;
        document.getElementById('editName').value = address.fullName || '';
        document.getElementById('editStreet').value = address.addressLine || '';
        document.getElementById('editCity').value = address.city || '';
        document.getElementById('editState').value = address.state || '';
        document.getElementById('editZipCode').value = address.pincode || '';
        document.getElementById('editPhone').value = address.phone || '';
        document.getElementById('editIsDefault').checked = address.isDefault || false;
        
        // Update form action to include address ID
        document.getElementById('editAddressForm').action = `/addresses/edit/${address._id}`;
        
        console.log('About to show modal');
        // Show modal
        modal.style.display = 'flex';
        document.getElementById('editName').focus();
      } else {
        console.error('Address not found with ID:', addressId);
        alert('Address not found. Please refresh the page.');
      }
    });
  });

  // Close modal handlers
  document.getElementById('closeEditModal').addEventListener('click', closeModal);
  document.getElementById('cancelEdit').addEventListener('click', closeModal);
  
  // Close modal when clicking outside
  modal.addEventListener('click', function(e) {
    if (e.target === modal) {
      closeModal();
    }
  });

  function closeModal() {
    modal.style.display = 'none';
    form.reset();
  }

  // Attach generic inline validator (server-driven)
  console.log('Attaching inline validation to edit form...');
  window.attachInlineValidation(form);
  console.log('Inline validation attached to edit form');



  // Update address card in the UI
  function updateAddressCard(addressId) {
    const addressCard = document.querySelector(`.address-card[data-address-id="${addressId}"]`);
    if (addressCard) {
      const address = addresses.find(a => a._id === addressId);
      if (address) {
        addressCard.querySelector('.address-name').textContent = address.fullName;
        addressCard.querySelector('.address-details').textContent = 
          `${address.addressLine}, ${address.city}, ${address.state}, ${address.pincode}`;
        addressCard.querySelector('.address-phone').textContent = `Phone: ${address.phone}`;
      }
    }
  }
  // Save address via AJAX to stay on checkout
  form.addEventListener('submit', async function(e) {
    e.preventDefault();
    if (!validateAllFields(form)) return;
    loadingOverlay.classList.remove('hidden');
    savingBadge?.classList.remove('hidden');

    const formData = new URLSearchParams(new FormData(form));
    try {
      const res = await fetch(form.action, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: formData.toString()
      });

      if (res.ok) {
        const data = await res.json();
        const idx = addresses.findIndex(a => a._id === data.address._id);
        if (idx >= 0) {
          addresses[idx] = data.address;
        }
        updateAddressCard(data.address._id);
        closeModal();
        showNotification('Address updated.', 'success');
      } else {
        let data = null;
        try { data = await res.json(); } catch (_) {}
        if (data && data.errors) {
          showErrors(form, data.errors);
        } else {
          showNotification('Failed to update address', 'error');
        }
      }
    } catch (err) {
      console.error(err);
      showNotification('Network error', 'error');
    } finally {
      loadingOverlay.classList.add('hidden');
      savingBadge?.classList.add('hidden');
    }
  });

  // Show notification
  function showNotification(message, type = 'info') {
    // Remove any existing notification
    const existingNotification = document.getElementById('notification');
    if (existingNotification) {
      existingNotification.remove();
    }
    
    const notification = document.createElement('div');
    notification.id = 'notification';
    notification.className = `fixed top-4 right-4 px-6 py-3 rounded-md text-white z-70 ${
      type === 'success' ? 'bg-green-500' : 
      type === 'error' ? 'bg-red-500' : 'bg-blue-500'
    }`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 3000);
  }

  // Handle keyboard shortcuts
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && modal.style.display !== 'none') {
      closeModal();
    }
  });
</script>

<!-- Add Address Modal -->
<div id="addAddressModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" style="display: none;">
  <div class="bg-white rounded-lg p-8 w-full max-w-md relative shadow-xl">
    <button id="closeAddModal" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 text-2xl">&times;</button>
    <h2 class="text-2xl font-semibold mb-6">Add Address</h2>

    <form id="addAddressForm" action="/addresses" method="POST">
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
        <input type="text" name="fullName" class="w-full border border-gray-300 rounded-md px-3 py-2" data-required>
      </div>
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">Phone</label>
        <input type="text" name="phone" class="w-full border border-gray-300 rounded-md px-3 py-2" data-required maxlength="10" pattern="[0-9]*" inputmode="numeric">
      </div>
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">Address</label>
        <input type="text" name="addressLine" class="w-full border border-gray-300 rounded-md px-3 py-2" data-required>
      </div>
      <div class="grid grid-cols-2 gap-3 mb-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">City</label>
          <input type="text" name="city" class="w-full border border-gray-300 rounded-md px-3 py-2" data-required>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">State</label>
          <input type="text" name="state" class="w-full border border-gray-300 rounded-md px-3 py-2" data-required>
        </div>
      </div>
      <div class="grid grid-cols-2 gap-3 mb-6">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Pincode</label>
          <input type="text" name="pincode" class="w-full border border-gray-300 rounded-md px-3 py-2" data-required maxlength="6" pattern="[0-9]*" inputmode="numeric">
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Country</label>
          <input type="text" name="country" class="w-full border border-gray-300 rounded-md px-3 py-2" value="India" data-required>
        </div>
      </div>
      <div class="mb-6">
        <label class="flex items-center gap-2">
          <input type="checkbox" name="isDefault" class="rounded">
          <span class="text-sm text-gray-700">Set as default address</span>
        </label>
      </div>
      <div class="flex gap-3">
        <button type="button" id="cancelAdd" class="flex-1 bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400">Cancel</button>
        <button type="submit" class="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">Save Address</button>
      </div>
    </form>
  </div>
  </div>

<script>
  // Add Address modal wiring
  const addModal = document.getElementById('addAddressModal');
  const openAddModalBtn = document.getElementById('openAddAddressModal');
  const closeAddModalBtn = document.getElementById('closeAddModal');
  const cancelAddBtn = document.getElementById('cancelAdd');
  const addForm = document.getElementById('addAddressForm');
  if (addForm) { 
    console.log('Attaching inline validation to add form...');
    window.attachInlineValidation(addForm); 
    console.log('Inline validation attached to add form');
  }

  function showAddModal(){ 
    console.log('Opening add modal...');
    addModal.style.display = 'flex'; 
    console.log('Modal should be visible now');
  }
  function hideAddModal(){ 
    console.log('Hiding add modal...');
    addModal.style.display = 'none'; 
    addForm.reset(); 
  }

  console.log('Setting up add modal event listeners...');
  console.log('openAddModalBtn:', openAddModalBtn);
  console.log('addModal:', addModal);
  
  if (openAddModalBtn) {
    openAddModalBtn.addEventListener('click', function(e) {
      console.log('Add button clicked!');
      e.preventDefault();
      showAddModal();
    });
  }
  
  if (closeAddModalBtn) {
    closeAddModalBtn.addEventListener('click', hideAddModal);
  }
  
  if (cancelAddBtn) {
    cancelAddBtn.addEventListener('click', hideAddModal);
  }
  
  if (addModal) {
    addModal.addEventListener('click', (e) => { 
      if (e.target === addModal) {
        console.log('Clicked outside modal, closing...');
        hideAddModal(); 
      }
    });
  }

  // Add input restrictions for phone and pincode fields
  const phoneInputs = document.querySelectorAll('input[name="phone"]');
  const pincodeInputs = document.querySelectorAll('input[name="pincode"]');
  
  // Phone input restrictions
  phoneInputs.forEach(input => {
    input.addEventListener('input', function(e) {
      // Remove any non-digit characters
      let value = e.target.value.replace(/\D/g, '');
      
      // Limit to 10 digits
      if (value.length > 10) {
        value = value.slice(0, 10);
      }
      
      e.target.value = value;
    });
  });
  
  // Pincode input restrictions
  pincodeInputs.forEach(input => {
    input.addEventListener('input', function(e) {
      // Remove any non-digit characters
      let value = e.target.value.replace(/\D/g, '');
      
      // Limit to 6 digits
      if (value.length > 6) {
        value = value.slice(0, 6);
      }
      
      e.target.value = value;
    });
  });

  // Custom submit handler for add address form to stay in checkout
  addForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Let the inline validator handle validation first
    const isValid = validateAllFields(addForm);
    if (!isValid) {
      return false;
    }
    
    // If validation passes, submit via AJAX
    const formData = new FormData(addForm);
    const urlSearchParams = new URLSearchParams();
    formData.forEach((value, key) => urlSearchParams.append(key, value));
    
    try {
      const response = await fetch('/addresses', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: urlSearchParams.toString()
      });
      
      if (response.ok) {
       
        window.location.reload();
      } else {
        // Handle validation errors
        const html = await response.text();
        const errors = extractValidationErrors(html);
        
        if (errors && Object.keys(errors).length > 0) {
          showErrors(addForm, errors);
        } else {
          alert('Failed to add address. Please try again.');
        }
      }
    } catch (error) {
      console.error('Error adding address:', error);
      alert('Network error. Please try again.');
    }
  });
</script>

</body>
</html>