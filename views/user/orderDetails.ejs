<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Order Details | CaptureCore</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 font-sans text-gray-800">
  <%- include('../partial/user/navbar') %>

  <%- include('../partial/user/profilesidebar') %>

  <!-- Profile Content -->
  <main class="flex-1">
    <div class="bg-gray-50 shadow rounded p-10">
      <!-- Header -->
      <div class="flex items-center justify-between mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-900">Order Details</h1>
          <p class="text-gray-600 mt-1">Order #<%= order.orderId %></p>
        </div>
        <div class="text-right">
          <div class="text-sm text-gray-500">Order Date</div>
          <div class="font-medium"><%= new Date(order.createdAt).toLocaleDateString() %></div>
        </div>
      </div>

      <!-- Order Status Card -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
        <div class="flex items-center justify-between">
          <div>
            <h2 class="text-lg font-semibold text-gray-900 mb-2">Order Status</h2>
            <div class="flex items-center gap-3">
              <span class="px-3 py-1 rounded-full text-sm font-medium 
                <%= order.status === 'Delivered' ? 'bg-green-100 text-green-800' : 
                    order.status === 'Cancelled' ? 'bg-red-100 text-red-800' :
                    order.status === 'Returned' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-blue-100 text-blue-800' %>">
                <%= order.status %>
              </span>
              <span class="text-sm text-gray-500">•</span>
              <span class="text-sm text-gray-600">
                Payment: <span class="font-medium 
                  <%= order.paymentStatus === 'Paid' ? 'text-green-600' : 
                      order.paymentStatus === 'Refunded' ? 'text-yellow-600' :
                      order.paymentStatus === 'Cancelled' ? 'text-red-600' : 'text-gray-600' %>">
                  <%= order.paymentStatus %>
                </span>
              </span>
            </div>
            
                         <!-- Show cancellation reason if order is cancelled -->
             <% if (order.status === 'Cancelled' && order.cancelReason) { %>
               <div class="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
                 <div class="flex items-start gap-3">
                   <svg class="w-5 h-5 text-red-600 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                     <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                   </svg>
                   <div>
                     <h3 class="text-sm font-semibold text-red-800 mb-1">Order Cancellation Reason</h3>
                     <p class="text-sm text-red-700 whitespace-pre-line"><%= order.cancelReason %></p>
                   </div>
                 </div>
               </div>
             <% } %>
             
                           <!-- Show partial cancellation notice -->
              <% 
                const partialCancelledItems = order.items.filter(item => item.status === 'Cancelled' || item.isCancelled);
                const activeItems = order.items.filter(item => item.status !== 'Cancelled' && !item.isCancelled);
              %>
              <% if (partialCancelledItems.length > 0 && activeItems.length > 0 && order.status !== 'Cancelled') { %>
               <div class="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                 <div class="flex items-start gap-3">
                   <svg class="w-5 h-5 text-yellow-600 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                     <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                   </svg>
                   <div>
                     <h3 class="text-sm font-semibold text-yellow-800 mb-1">Partial Order Update</h3>
                     <p class="text-sm text-yellow-700">
                       Some items in your order have been cancelled by admin. The remaining <%= activeItems.length %> item(s) will continue to be processed and delivered.
                     </p>
                   </div>
                 </div>
               </div>
             <% } %>
          </div>
          <div class="text-right">
            <div class="text-2xl font-bold text-gray-900">₹<%= order.total.toFixed(2) %></div>
            <div class="text-sm text-gray-500">Total Amount</div>
          </div>
        </div>
      </div>

      <!-- Order Items -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
        <h2 class="text-lg font-semibold text-gray-900 mb-6">Order Items</h2>
        <div class="space-y-6">
          <% order.items.forEach(item => { %>
            <div class="flex items-start gap-4 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
              <img src="<%= item.product.images?.[0] || '/images/placeholder.png' %>" 
                   class="w-20 h-20 object-cover rounded-lg border border-gray-200" 
                   alt="<%= item.product.name %>">
              <div class="flex-1 min-w-0">
                <div class="flex items-start justify-between">
                  <div class="flex-1">
                    <h3 class="font-semibold text-gray-900 mb-1"><%= item.product.name %></h3>
                    <div class="flex items-center gap-4 text-sm text-gray-600 mb-2">
                      <span>Qty: <%= item.quantity %></span>
                      <span>Price: ₹<%= item.product.price.toFixed(2) %></span>
                      <span class="font-medium text-gray-900">Total: ₹<%= (item.product.price * item.quantity).toFixed(2) %></span>
                    </div>

                  </div>
                  <div class="text-right">
                    <!-- Status Badge -->
                    <% if (item.isCancelled || item.status === 'Cancelled') { %>
                      <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800">
                        <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                        Cancelled
                      </span>
                    <% } else if (item.status === 'Return Requested') { %>
                      <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-orange-100 text-orange-800">
                        <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                        </svg>
                        Return Requested
                      </span>
                    <% } else if (item.isReturned || item.status === 'Returned') { %>
                      <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-yellow-100 text-yellow-800">
                        <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                        Returned
                      </span>
                    <% } else { %>
                      <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                        <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <%= item.status %>
                      </span>
                    <% } %>
                  </div>
                </div>

                <!-- Show cancellation reason for cancelled items -->
                <% if ((item.isCancelled || item.status === 'Cancelled') && item.cancelReason) { %>
                  <div class="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
                    <div class="flex items-start gap-2">
                      <svg class="w-4 h-4 text-red-600 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                      </svg>
                      <div>
                        <h4 class="text-xs font-semibold text-red-800 mb-1">Item Cancelled by Admin</h4>
                        <p class="text-xs text-red-700 whitespace-pre-line"><%= item.cancelReason %></p>
                      </div>
                    </div>
                  </div>
                <% } %>

                <!-- Action Buttons -->
                <div class="mt-4 flex flex-wrap gap-3">
                  <% if (!item.isCancelled && item.status !== 'Cancelled' && item.status !== 'Delivered' && item.status !== 'Return Requested' && item.status !== 'Returned' && !item.isReturned) { %>
                    <button type="button" 
                            class="inline-flex items-center px-3 py-2 border border-red-300 text-sm font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors cancel-item-btn" 
                            data-order-id="<%= order.orderId %>" 
                            data-product-id="<%= item.product._id %>">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                      </svg>
                      Cancel Item
                    </button>
                  <% } %>

                  <% if (item.status === 'Delivered' && item.status !== 'Return Requested' && item.status !== 'Returned' && !item.isReturned) { %>
                    <div class="flex-1 min-w-0">
                      <textarea name="reason" 
                                placeholder="Return reason (required)" 
                                required 
                                class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 return-reason"></textarea>
                    </div>
                    <button type="button" 
                            class="inline-flex items-center px-3 py-2 border border-yellow-300 text-sm font-medium rounded-md text-yellow-700 bg-white hover:bg-yellow-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 transition-colors return-item-btn" 
                            data-order-id="<%= order.orderId %>" 
                            data-product-id="<%= item.product._id %>">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"></path>
                      </svg>
                      Return Item
                    </button>
                  <% } %>
                </div>
              </div>
            </div>
          <% }) %>
        </div>
      </div>

      <!-- Shipping Address -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
        <h2 class="text-lg font-semibold text-gray-900 mb-4">Shipping Address</h2>
        <div class="bg-gray-50 rounded-lg p-4">
          <div class="flex items-start">
            <svg class="w-5 h-5 text-gray-400 mr-3 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            <div class="text-gray-700">
              <div class="font-medium text-gray-900"><%= order.address.fullName %></div>
              <div class="text-sm mt-1">
                <%= order.address.addressLine %><br>
                <%= order.address.city %>, <%= order.address.state %> - <%= order.address.pincode %><br>
                <%= order.address.country %><br>
                <span class="text-gray-600">Phone: <%= order.address.phone %></span>
              </div>
            </div>
          </div>
        </div>
      </div>

             <!-- Order Summary -->
       <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
         <h2 class="text-lg font-semibold text-gray-900 mb-4">Order Summary</h2>
         <div class="space-y-3">
                       <% 
              const cancelledItems = order.items.filter(item => item.status === 'Cancelled' || item.isCancelled);
              const totalCancelledAmount = cancelledItems.reduce((sum, item) => {
                const itemPrice = item.product?.price || item.price || 0;
                const itemQty = item.quantity || 1;
                return sum + (itemPrice * itemQty);
              }, 0);
              
              // Calculate original subtotal (including all products)
              const originalSubtotal = order.subtotal + totalCancelledAmount;
            %>
            
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Subtotal</span>
              <span class="font-medium">₹<%= originalSubtotal.toFixed(2) %></span>
            </div>
           <div class="flex justify-between text-sm">
             <span class="text-gray-600">Tax</span>
             <span class="font-medium">₹<%= order.tax.toFixed(2) %></span>
           </div>
           <div class="flex justify-between text-sm">
             <span class="text-gray-600">Shipping</span>
             <span class="font-medium">₹<%= order.shipping.toFixed(2) %></span>
           </div>
           <div class="flex justify-between text-sm">
             <span class="text-gray-600">Discount</span>
             <span class="font-medium text-green-600">-₹<%= order.discount.toFixed(2) %></span>
           </div>
           
                       <% if (cancelledItems.length > 0) { %>
              <div class="flex justify-between text-sm">
                <span class="text-red-600">Cancelled Items</span>
                <span class="font-medium text-red-600">-₹<%= totalCancelledAmount.toFixed(2) %></span>
              </div>
            <% } %>
            
            <div class="border-t border-gray-200 pt-3 mt-3">
              <div class="flex justify-between">
                <span class="text-lg font-semibold text-gray-900">Total</span>
                <span class="text-lg font-bold text-gray-900">₹<%= order.total.toFixed(2) %></span>
              </div>
              <% if (cancelledItems.length > 0) { %>
                <div class="text-xs text-gray-500 mt-1">
                  <!-- * Total adjusted due to cancelled items -->
                </div>
              <% } %>
            </div>
         </div>
       </div>

      <!-- Return Summary -->
      <% if (order.items.some(item => item.status === 'Return Requested' || item.status === 'Returned' || item.isReturned)) { %>
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
          <h2 class="text-lg font-semibold text-gray-900 mb-4">Return Summary</h2>
          <div class="space-y-4">
            <% order.items.forEach(item => { %>
              <% if (item.status === 'Return Requested' || item.status === 'Returned' || item.isReturned) { %>
                <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <div class="flex items-start justify-between">
                    <div class="flex-1">
                      <div class="flex items-center gap-3 mb-2">
                        <img src="<%= item.product.images?.[0] || '/images/placeholder.png' %>" 
                             class="w-12 h-12 object-cover rounded border border-gray-200" 
                             alt="<%= item.product.name %>">
                        <div>
                          <h3 class="font-medium text-gray-900"><%= item.product.name %></h3>
                          <p class="text-sm text-gray-600">Qty: <%= item.quantity %></p>
                        </div>
                      </div>
                      
                      <div class="space-y-2 text-sm">
                        <div class="flex justify-between">
                          <span class="text-gray-600">Return Status:</span>
                          <span class="px-2 py-1 rounded-full text-xs font-medium 
                            <%= item.status === 'Returned' ? 'bg-green-100 text-green-800' : 
                                item.status === 'Return Requested' ? 'bg-yellow-100 text-yellow-800' : 
                                'bg-gray-100 text-gray-800' %>">
                            <%= item.status %>
                          </span>
                        </div>
                        
                        <% if (item.returnReason) { %>
                          <div class="flex justify-between">
                            <span class="text-gray-600">Return Reason:</span>
                            <span class="text-right max-w-xs"><%= item.returnReason %></span>
                          </div>
                        <% } %>
                        
                        <% if (item.returnApproved) { %>
                          <div class="flex justify-between">
                            <span class="text-gray-600">Return Approved:</span>
                            <span class="text-green-600 font-medium">✓ Yes</span>
                          </div>
                        <% } %>
                        
                        <div class="flex justify-between">
                          <span class="text-gray-600">Item Price:</span>
                          <span class="font-medium">₹<%= item.price.toFixed(2) %></span>
                        </div>
                        
                        <div class="flex justify-between">
                          <span class="text-gray-600">Total Amount:</span>
                          <span class="font-medium">₹<%= (item.price * item.quantity).toFixed(2) %></span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              <% } %>
            <% }); %>
            
            <!-- Return Summary Totals -->
            <% 
              const returnedItems = order.items.filter(item => 
                item.status === 'Return Requested' || item.status === 'Returned' || item.isReturned
              );
              const totalReturnedAmount = returnedItems.reduce((sum, item) => 
                sum + (item.price * item.quantity), 0
              );
            %>
            <% if (returnedItems.length > 0) { %>
              <div class="border-t border-gray-200 pt-4 mt-4">
                <div class="flex justify-between text-sm">
                  <span class="text-gray-600">Total Returned Items:</span>
                  <span class="font-medium"><%= returnedItems.length %></span>
                </div>
                <div class="flex justify-between text-lg font-semibold mt-2">
                  <span class="text-gray-900">Total Return Amount:</span>
                  <span class="text-red-600">₹<%= totalReturnedAmount.toFixed(2) %></span>
                </div>
              </div>
            <% } %>
          </div>
        </div>
      <% } %>

      <!-- Full Order Actions -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h2 class="text-lg font-semibold text-gray-900 mb-4">Order Actions</h2>
        <div class="space-y-4">
          <% if (order.status === 'Placed') { %>
            <!-- Cancel Full Order -->
            <div class="bg-red-50 border border-red-200 rounded-lg p-4">
              <h3 class="text-sm font-medium text-red-800 mb-3">Cancel Entire Order</h3>
              <div class="flex flex-col sm:flex-row gap-3">
                <textarea name="reason" 
                          placeholder="Cancel reason (optional)" 
                          class="flex-1 px-3 py-2 border border-red-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500 cancel-full-reason"></textarea>
                <button type="button" 
                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors cancel-full-order-btn" 
                        data-order-id="<%= order.orderId %>">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                  Cancel Entire Order
                </button>
              </div>
            </div>
          <% } %>

          <% if (order.status === 'Delivered' && !order.items.some(item => item.status === 'Return Requested' || item.status === 'Returned')) { %>
            <!-- Return Full Order -->
            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <h3 class="text-sm font-medium text-yellow-800 mb-3">Return Entire Order</h3>
              <div class="flex flex-col sm:flex-row gap-3">
                <textarea name="reason" 
                          placeholder="Return reason (required)" 
                          required 
                          class="flex-1 px-3 py-2 border border-yellow-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 return-full-reason"></textarea>
                <button type="button" 
                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 transition-colors return-full-order-btn" 
                        data-order-id="<%= order.orderId %>">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"></path>
                  </svg>
                  Return Entire Order
                </button>
              </div>
            </div>
          <% } %>

          <!-- Invoice - Show for delivered orders -->
          <% if (order.status === 'Delivered') { %>
            <div class="bg-green-50 border border-green-200 rounded-lg p-4">
              <h3 class="text-sm font-medium text-green-800 mb-3">Download Invoice</h3>
              <a href="/order/<%= order.orderId %>/invoice" 
                 class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Download Invoice
              </a>
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </main>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
         document.addEventListener('DOMContentLoaded', () => {
       // Handle cancel full order button
       document.querySelectorAll('.cancel-full-order-btn').forEach(button => {
         button.addEventListener('click', async (e) => {
           e.preventDefault();
           const orderId = button.dataset.orderId;
           const reasonTextarea = document.querySelector('.cancel-full-reason');
           const reason = reasonTextarea ? reasonTextarea.value : '';

           const confirm = await Swal.fire({
             title: 'Cancel Entire Order?',
             text: 'Are you sure you want to cancel this entire order?',
             icon: 'warning',
             showCancelButton: true,
             confirmButtonText: 'Yes, cancel it!',
             cancelButtonText: 'Keep it',
             confirmButtonColor: '#dc2626'
           });

           if (!confirm.isConfirmed) return;

           try {
             const res = await fetch(`/order/${orderId}/cancel`, {
               method: 'POST',
               headers: { 'Content-Type': 'application/json' },
               body: JSON.stringify({
                 reason: reason
               })
             });

             const data = await res.json();

             if (data.success) {
               Swal.fire('Cancelled!', 'Your entire order has been cancelled.', 'success')
                 .then(() => {
                   window.location.href = '/orders'; // Redirect to orders page
                 });
             } else {
               Swal.fire('Error', data.message || 'Failed to cancel order.', 'error');
             }
           } catch (err) {
             Swal.fire('Error', 'Something went wrong. Try again later.', 'error');
           }
         });
       });

   
       document.querySelectorAll('.cancel-item-btn').forEach(button => {
        button.addEventListener('click', async (e) => {
          e.preventDefault();
          const orderId = button.dataset.orderId;
          const productId = button.dataset.productId;
          let reason = '';
          const container = button.closest('.flex') || button.parentElement;
          if (container) {
            const reasonTextarea = container.querySelector('.cancel-reason');
            if (reasonTextarea) {
              reason = reasonTextarea.value;
            }
          }

          const confirm = await Swal.fire({
            title: 'Cancel Product?',
            text: 'Are you sure you want to cancel this product from your order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'Keep it',
            confirmButtonColor: '#dc2626'
          });

          if (!confirm.isConfirmed) return;

          try {
            const res = await fetch('/order/cancel-item', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                orderId: orderId,
                productId: productId,
                reason: reason
              })
            });

            const data = await res.json();

            if (data.success) {
              Swal.fire('Cancelled!', 'Product has been cancelled from your order.', 'success')
                .then(() => {
                  location.reload(); // Reload page to show updated status
                });
            } else {
              Swal.fire('Error', data.message || 'Failed to cancel product.', 'error');
            }
          } catch (err) {
            Swal.fire('Error', 'Something went wrong. Try again later.', 'error');
          }
                 });
       });

       // Handle return item buttons
       document.querySelectorAll('.return-item-btn').forEach(button => {
         button.addEventListener('click', async (e) => {
           e.preventDefault();
           const orderId = button.dataset.orderId;
           const productId = button.dataset.productId;
           const reasonTextarea = button.parentElement.querySelector('.return-reason');
           const reason = reasonTextarea.value;

           if (!reason.trim()) {
             Swal.fire('Error', 'Please provide a return reason.', 'error');
             return;
           }

           const confirm = await Swal.fire({
             title: 'Return Product?',
             text: 'Are you sure you want to return this product?',
             icon: 'warning',
             showCancelButton: true,
             confirmButtonText: 'Yes, return it!',
             cancelButtonText: 'Keep it',
             confirmButtonColor: '#f59e0b'
           });

           if (!confirm.isConfirmed) return;

           try {
             const res = await fetch('/order/return-item', {
               method: 'POST',
               headers: { 'Content-Type': 'application/json' },
               body: JSON.stringify({
                 orderId: orderId,
                 productId: productId,
                 reason: reason
               })
             });

             const data = await res.json();

             if (data.success) {
               Swal.fire('Returned!', 'Product has been returned successfully.', 'success')
                 .then(() => {
                   location.reload(); // Reload page to show updated status
                 });
             } else {
               Swal.fire('Error', data.message || 'Failed to return product.', 'error');
             }
           } catch (err) {
             Swal.fire('Error', 'Something went wrong. Try again later.', 'error');
           }
         });
       });

       // Handle return full order button
       document.querySelectorAll('.return-full-order-btn').forEach(button => {
         button.addEventListener('click', async (e) => {
           e.preventDefault();
           const orderId = button.dataset.orderId;
           const reasonTextarea = document.querySelector('.return-full-reason');
           const reason = reasonTextarea ? reasonTextarea.value : '';

           if (!reason.trim()) {
             Swal.fire('Error', 'Please provide a return reason.', 'error');
             return;
           }

           const confirm = await Swal.fire({
             title: 'Return Entire Order?',
             text: 'Are you sure you want to return this entire order?',
             icon: 'warning',
             showCancelButton: true,
             confirmButtonText: 'Yes, return it!',
             cancelButtonText: 'Keep it',
             confirmButtonColor: '#f59e0b'
           });

           if (!confirm.isConfirmed) return;

           try {
             const res = await fetch('/order/return', {
               method: 'POST',
               headers: { 'Content-Type': 'application/json' },
               body: JSON.stringify({
                 orderId: orderId,
                 reason: reason
               })
             });

             const data = await res.json();

             if (data.success) {
               Swal.fire('Returned!', 'Your entire order has been returned successfully.', 'success')
                 .then(() => {
                   window.location.href = '/orders'; // Redirect to orders page
                 });
             } else {
               Swal.fire('Error', data.message || 'Failed to return order.', 'error');
             }
           } catch (err) {
             Swal.fire('Error', 'Something went wrong. Try again later.', 'error');
           }
         });
       });
     });
  </script>
</body>
</html>
